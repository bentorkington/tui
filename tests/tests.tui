testCommon = require("tests/testCommon.tui")
assert = testCommon.assert

emptyTable = {}
#print(emptyTable[2] == nil)

testAdd = function(a,b)
{
    return a + b
}

testSub = function(a,b)
{
    return a - b
}

testMult = function(a,b)
{
    return a * b
}

testDivide = function(a,b)
{
    return a / b
}

testGreaterThan = function(a,b)
{
    return a > b
}

testEqualTo = function(a,b)
{
    return a == b
}

testGreaterThanEqualTo = function(a,b)
{
    return a >= b
}

testLessThanEqualTo = function(a,b)
{
    return a <= b
}

testNotLogicalOperators = function(somethingTrue)
{
    somethingFalse = !somethingTrue
    
    assert(somethingTrue == true, "somethingTrue == true")
    assert(somethingTrue, "somethingTrue")
    assert(somethingFalse == false, "somethingFalse == false")
    assert(!somethingFalse, "!somethingFalse")
    assert(!nothing == true, "!nothing == true")

    somethingFalse = 4 != 4
    assert(somethingFalse == false, "4 != 4 == false")
}

varTen = 10

testNotLogicalOperators(2 != (2 + 2))
notEqualPassTest = 4 != 5
assert(notEqualPassTest == true, "notEqualPassTest == true")
notEqualFailTest = 4 != 4
assert(notEqualFailTest == false, "notEqualFailTest == false")

assert(testAdd(2,8) == 10, "testAdd(2,8) == 10")
#assert((2 + 8) == 10, "(2 + 8) == 10")
assert(testSub(20,varTen) == 10, "testSub(20,varTen) == 10")
#assert((20 - varTen) == 10, "(20 - 10) == 10")
assert(testMult(5,5) == 25, "testMult(5,5) == 25")
assert(testDivide(100,10) == 10, "testDivide(100,10) == 10")
assert(testGreaterThan(100,10), "testGreaterThan(100,10)")
assert(testGreaterThanEqualTo(9,10) == false, "testGreaterThanEqualTo(9,10) = false")
assert(testGreaterThanEqualTo(10,varTen), "testGreaterThanEqualTo(10,varTen)")
assert(testGreaterThanEqualTo(11,10), "testGreaterThanEqualTo(11,10)")
assert(testLessThanEqualTo(9,10), "testLessThanEqualTo(9,10)")
assert(testLessThanEqualTo(10,varTen), "testLessThanEqualTo(10,varTen)")
assert(testLessThanEqualTo(11,10) == false, "testLessThanEqualTo(11,10 = false)")
assert(testEqualTo(20,10) == false, "testEqualTo(20,10) == false")
assert(testEqualTo(10,20) == false, "testEqualTo(10,20) == false")
assert(testEqualTo(varTen,10) == true, "testEqualTo(varTen,10) == true")
assert(testEqualTo(10,"10") == false, "testEqualTo(10,\"10\") == false")
assert(testEqualTo("10","10") == true, 'testEqualTo("10","10") == true')
assert(testEqualTo("hello","10") == false, "testEqualTo('hello','10') == false")

assert(testAdd(vec2(2,2),vec2(8,8)) == vec2(10,10), "testAdd(vec2(2,2),vec2(8,8)) == vec2(10,10)")
assert(testSub(vec2(20,20),vec2(10,10)) == vec2(10,10), "testSub(vec2(20,20),vec2(10,10))")
assert(testMult(vec2(5, 5), 5) == vec2(25,25), "testMult(vec2(5, 5), 5)")
assert(testDivide(vec2(100, 100), vec2(10, 10)) == vec2(10,10), "testDivide(vec2(100, 100), vec2(10, 10))")

assert(testMult(vec2(5, 5), 5) == vec2(25,25), "testMult(vec2(5, 5), 5)")
assert(testDivide(vec2(100, 100), 10) == vec2(10,10), "testDivide(vec2(100, 100), 10)")

assert(testAdd(vec3(2,2,2),vec3(8,8,8)) == vec3(10,10,10), "testAdd(vec3(2,2,2),vec3(8,8,2))")
assert(testSub(vec3(20,20,20),vec3(varTen,10,10)) == vec3(10,10,10), "testSub(vec3(20,20,20),vec3(varTen,10,10))")
assert(testMult(vec3(5, 5,5), 5) == vec3(25,25,25), "testMult(vec3(5, 5,5), 5)")
assert(testDivide(vec3(100, 100,100), vec3(10, 10,10)) == vec3(10,varTen,10), "testDivide(vec3(100, 100,100), vec3(10, 10,10))")

assert(testMult(vec3(5, 5,5), 5) == vec3(25,25,25), "testMult(vec3(5, 5,5), 5)")
assert(testDivide(vec3(100, 100, 100), 10) == vec3(10,10,10), "testDivide(vec3(100, 100, 100), 10)")

print("lineNumber:", debug.getLineNumber())
print("fileName:", debug.getFileName())

assert(type(5) == "number", "type(5) == number")
assert(type(varTen) == "number", "type(varTen) == number")
assert(type("hello") == "string", "type(hello) == string")
assert(type({5}) == "table", "type({5}) == table")
assert(type(true) == "bool", "type(true) == bool")
assert(type(vec2(1,2)) == "vec2", "type(vec2(1,2)) == vec2")
assert(type(vec3(1,2,3)) == "vec3", "type(vec3(1,2,3)) == vec3")
assert(type(vec4(1,2,3,4)) == "vec4", "type(vec4(1,2,3,4)) == vec4")

testTable = {
    "zero",
    "one",
    "two",
    "four",
    "five"
}
table.insert(testTable, 3, "three")
print(testTable)
#assert(testTable[3] == "three", "testTable[3] == three")
#testTable[2] = 2.0
#assert(testTable[2] == 2, "testTable[2] == 2")

#testTable[7] = "seven"
#assert(testTable[7] == "seven", "testTable[7] == seven")
#assert(testTable[6] == nil, "testTable[6] == nil")

print(testTable)

notTrue = !true
assert(notTrue == false, "notTrue == false")

array = {1,2,3,4,5}
sum = 0
for(object in array)
{
    sum = sum + object
}
assert(sum == 15, "for array loop")

sum = 0
for(index,object in array)
{
    sum = sum + object + index
}
assert(sum == 25, "for array index loop")

test13 = (4 * (3 + 1) + 4) - 1 - 2 * (2 + 1)
assert(test13 == 13, "expression 1 - variable")
assert(((4 * (3 + 1) + 4) - 1 - 2 * (2 + 1)) == 13, "expression 1 - call")

testTrue = 7 * 2 - 5 == 9
assert(testTrue, "expression 2 - variable")
assert(7 * 2 - 5 == 9, "expression 2 - wrapped")

assert(1 + 2 * 3 * 4 - 5 * 4 + 12 / 2 == 11, "expression 3")

expression3Function = function()
{
    return 1 + 2 * 3 * 4 - 5 * 4 + 12 / 2 == 11
}
assert(expression3Function(), "expression 3 - function")

orTrue = (1 == 2) or (2 == 2)
assert(orTrue, "orTrue 1")

orTrue = (2 == 2) or (1 == 2)
assert(orTrue, "orTrue 2")

orTrue = 1 == 2 or 2 == 2
assert(orTrue, "orTrue 3")

orFalse = (2 == 3) or (1 == 2)
assert(!orFalse, "orFalse 1")

orFalse = (2 == 3 or 1 == 2)
assert(!orFalse, "orFalse 2")


andTrue = (1 == 1) and (2 == 2)
assert(andTrue, "andTrue 1")

andTrue = (2 == 2) and (1 != 2)
assert(andTrue, "andTrue 2")

andTrue = 1 == 1 and 2 == 2
assert(andTrue, "andTrue 3")

andFalse = (2 == 2) and (1 == 2)
assert(!andFalse, "andFalse 1")

andFalse = (2 == 3 and 1 == 1)
assert(!andFalse, "andFalse 2")

andFalse = (2 != 3 and 1 != 1)
assert(!andFalse, "andFalse 3")

orAndFunction = function()
{
    orTrue = (1 == 2) or (2 == 2)
    assert(orTrue, "function orTrue 1")

    orTrue = (2 == 2) or (1 == 2)
    assert(orTrue, "function orTrue 2")

    orTrue = 1 == 2 or 2 == 2
    assert(orTrue, "function orTrue 3")

    orFalse = (2 == 3) or (1 == 2)
    assert(!orFalse, "function orFalse 1")

    orFalse = (2 == 3 or 1 == 2)
    assert(!orFalse, "function orFalse 2")


    andTrue = (1 == 1) and (2 == 2)
    assert(andTrue, "function andTrue 1")

    andTrue = (2 == 2) and (1 != 2)
    assert(andTrue, "function andTrue 2")

    andTrue = 1 == 1 and 2 == 2
    assert(andTrue, "function andTrue 3")

    andFalse = (2 == 2) and (1 == 2)
    assert(!andFalse, "function andFalse 1")

    andFalse = (2 == 3 and 1 == 1)
    assert(!andFalse, "function andFalse 2")

    andFalse = (2 != 3 and 1 != 1)
    assert(!andFalse, "function andFalse 3")
}

orAndFunction()

#test5 = testInnerTable.test4 + 1
#test6 = 3 * 2
#test7 = 14 / 2
#test8 = test7 + test3 - 2
#test9 = test7 * test2 - test5
#test10 = testInnerTable.test4 + test2 * test3
#test11 = 1 + 2 * 3 * 4 - 5 * 4 + 12 / 2
#test12 = (1 + 2) * 4
#
#testDave27 = 3 * ((1 + 2) * 3)
#test14 = 7.5 + (6.5 * 2 - 6.5)
#test15 = 1/2 + 1.0 / 2.0 + 13.5 + test1/test2
#
#testVec2_1_2 = vec2(2,4) / 2.0
#testVec2_1_4 = vec2(0.5,2) * 2
#testVec2_1_4b = 2 * vec2(0.5,2)
#testVec2_4_6 = vec2(1,2) + vec2(3,4)
#testVec2_2_6 = vec2(1,2) * vec2(2,3)
#
#testVec3_1_2_3 = vec3(2,4,6) / 2.0
#testVec3_1_4_8 = vec3(0.5,2,4.0) * 2
#testVec3_1_4_0p246 = 2 * vec3(0.5,2,0.123)
#testVec3_4_6_8 = vec3(1,2,3) + vec3(3,4,5)
#testVec3_2_6_9 = vec3(1,2,3) * vec3(2,3,3)
#
#testVec4_1_2_3_4 = vec4(2,4,6,8) / 2.0
#testVec4_1_4_8_16 = vec4(0.5,2,4.0,8) * 2
#testVec4_1_4_0p246_8 = 2 * vec4(0.5,2,0.123,4)
#testVec4_4_6_8_10 = vec4(1,2,3,4) + vec4(3,4,5,6)
#testVec4_2_6_9_12 = vec4(1,2,3,4) * vec4(2,3,3,3)


################################################

testCommon.printResult()